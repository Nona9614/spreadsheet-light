{
    "skip": false,
    "items": [
        {
            "skip": false,
            "string": "\"a\"\"b\"\"c\"\"\"",
            "expected": "a\"b\"c\"",
            "message": "Should collect all of the double quote as quotes"
        },
        {
            "skip": false,
            "string": "",
            "options": {
                "format": {
                    "empty": 0
                }
            },
            "expected": 0,
            "message": "Should return the empty value from an empty cell"
        },
        {
            "skip": false,
            "string": "\"\"",
            "options": {
                "format": {
                    "empty": 0
                }
            },
            "expected": 0,
            "message": "Should reduce it as an empty value"
        },
        {
            "skip": false,
            "string": "\"\"\"\"",
            "expected": "\"",
            "message": "Should reduce it as a single quote"
        },
        {
            "skip": false,
            "string": "\"a\"",
            "expected": "a",
            "message": "Should remove surrounding quotes"
        },
        {
            "skip": false,
            "string": "a",
            "expected": "a",
            "message": "Should return any non special character as it is"
        },
        {
            "skip": false,
            "string": "a\"\"bb\"\"c\"\"",
            "expected": "a\"bb\"c\"",
            "message": "Should resolve any combination of special and normal characters"
        },
        {
            "skip": false,
            "string": "{\"a\":1}",
            "expected": {
                "a": 1
            },
            "message": "Should transform a text into an object"
        },
        {
            "skip": false,
            "string": "[\"a\"]",
            "expected": [
                "a"
            ],
            "message": "Should transform a text into an array"
        },
        {
            "skip": false,
            "string": "ab''''''cd''''''ef",
            "options": {
                "format": {
                    "quote": "'''"
                }
            },
            "expected": "ab'''cd'''ef",
            "message": "Should resolve quotes longer than one character"
        },
        {
            "skip": false,
            "string": "ab''cd''ef",
            "options": {
                "format": {
                    "quote": "'"
                }
            },
            "expected": "ab'cd'ef",
            "message": "Should resolve custom quotes"
        },
        {
            "skip": false,
            "string": "abc",
            "expected": "abc",
            "message": "Should keep it as string"
        },
        {
            "skip": false,
            "string": "123",
            "expected": 123,
            "message": "Should transform the integer"
        },
        {
            "skip": false,
            "string": "+123",
            "expected": 123,
            "message": "Should transform the positive integer"
        },
        {
            "skip": false,
            "string": "-123",
            "expected": -123,
            "message": "Should transform the negative integer"
        },
        {
            "skip": false,
            "string": "123.45",
            "expected": 123.45,
            "message": "Should transform the number with decimals"
        },
        {
            "skip": false,
            "string": "-123.45",
            "expected": -123.45,
            "message": "Should transform the negative number with decimals"
        },
        {
            "skip": false,
            "string": "12e5",
            "expected": 1200000,
            "message": "Should transform the number with positive exponent"
        },
        {
            "skip": false,
            "string": "12e-5",
            "expected": 0.00012,
            "message": "Should transform the number with negative exponent"
        },
        {
            "skip": false,
            "string": "000123",
            "expected": 123,
            "message": "Should transform and ignore the leading zeroes"
        },
        {
            "skip": false,
            "string": "0b111",
            "expected": 7,
            "message": "Should transform binary numbers"
        },
        {
            "skip": false,
            "string": "0o10",
            "expected": 8,
            "message": "Should transform octagonal numbers"
        },
        {
            "skip": false,
            "string": "0xBABE",
            "expected": 47806,
            "message": "Should transform hexadecimal numbers"
        },
        {
            "skip": false,
            "string": "0xBABE",
            "expected": 47806,
            "message": "Should transform hexadecimal numbers"
        },
        {
            "skip": false,
            "string": "12e999",
            "expected": 99e999,
            "message": "Should transform any value beyond JavaScript 'Infinity' as is"
        },
        {
            "skip": false,
            "string": "-12e999",
            "expected": -99e999,
            "message": "Should transform any value beyond JavaScript negative 'Infinity' as is"
        },
        {
            "skip": false,
            "string": "null",
            "expected": null,
            "message": "Should transform lower case string null"
        },
        {
            "skip": false,
            "string": "NULL",
            "expected": null,
            "message": "Should transform upper case string null"
        },
        {
            "skip": false,
            "string": "undefined",
            "expected": "undefined",
            "message": "Should transform lower case string undefined"
        },
        {
            "skip": false,
            "string": "TRUE",
            "expected": true,
            "message": "Should transform lower case string true"
        },
        {
            "skip": false,
            "string": "true",
            "expected": true,
            "message": "Should transform upper case string true"
        },
        {
            "skip": false,
            "string": "false",
            "expected": false,
            "message": "Should transform lower case string false"
        },
        {
            "skip": false,
            "string": "FALSE",
            "expected": false,
            "message": "Should transform upper case string false"
        },
        {
            "skip": false,
            "string": "2018/12/05",
            "serializer": "date",
            "expected": "2018/12/05",
            "message": "Should transform to customized case"
        }
    ],
    "errors": [
        {
            "skip": false,
            "name": "DoubleQuoteError",
            "throws": {
                "fg-arrow": "\u001B[36m",
                "fg-error": "\u001B[93m",
                "fg-reset": "\u001B[0m"
            },
            "message": "Should fail when the quotes are separated",
            "params": [
                "\"  \"X\"  \""
            ]
        },
        {
            "skip": false,
            "name": "NotValidCloseQuote",
            "throws": {
                "fg-arrow": "\u001B[36m",
                "fg-error": "\u001B[93m",
                "fg-reset": "\u001B[0m"
            },
            "message": "Should fail when the finish quote is not followed by space or a special char",
            "params": [
                "\"\"   a,"
            ]
        },
        {
            "skip": false,
            "name": "ObjectNeverClosed",
            "throws": {
                "fg-arrow": "\u001B[36m",
                "fg-dots": "\u001B[91m",
                "fg-error": "\u001B[93m",
                "fg-reset": "\u001B[0m"
            },
            "message": "Should fail when a quoted value was not never closed",
            "params": [
                "\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
            ]
        }
    ]
}